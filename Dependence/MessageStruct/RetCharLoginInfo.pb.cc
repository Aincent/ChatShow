// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RetCharLoginInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RetCharLoginInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CharLogin {

namespace {

const ::google::protobuf::Descriptor* RetCharLoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetCharLoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharExitGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharExitGame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RetCharLoginInfo_2eproto() {
  protobuf_AddDesc_RetCharLoginInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RetCharLoginInfo.proto");
  GOOGLE_CHECK(file != NULL);
  RetCharLoginInfo_descriptor_ = file->message_type(0);
  static const int RetCharLoginInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCharLoginInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCharLoginInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCharLoginInfo, ison_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCharLoginInfo, openid_),
  };
  RetCharLoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetCharLoginInfo_descriptor_,
      RetCharLoginInfo::default_instance_,
      RetCharLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCharLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCharLoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetCharLoginInfo));
  CharExitGame_descriptor_ = file->message_type(1);
  static const int CharExitGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharExitGame, charid_),
  };
  CharExitGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharExitGame_descriptor_,
      CharExitGame::default_instance_,
      CharExitGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharExitGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharExitGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharExitGame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RetCharLoginInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetCharLoginInfo_descriptor_, &RetCharLoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharExitGame_descriptor_, &CharExitGame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RetCharLoginInfo_2eproto() {
  delete RetCharLoginInfo::default_instance_;
  delete RetCharLoginInfo_reflection_;
  delete CharExitGame::default_instance_;
  delete CharExitGame_reflection_;
}

void protobuf_AddDesc_RetCharLoginInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026RetCharLoginInfo.proto\022\tCharLogin\"O\n\020R"
    "etCharLoginInfo\022\016\n\006charid\030\001 \002(\003\022\r\n\005mapid"
    "\030\002 \002(\003\022\014\n\004ison\030\003 \001(\010\022\016\n\006openID\030\004 \001(\t\"\036\n\014"
    "CharExitGame\022\016\n\006charid\030\001 \002(\003", 148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RetCharLoginInfo.proto", &protobuf_RegisterTypes);
  RetCharLoginInfo::default_instance_ = new RetCharLoginInfo();
  CharExitGame::default_instance_ = new CharExitGame();
  RetCharLoginInfo::default_instance_->InitAsDefaultInstance();
  CharExitGame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RetCharLoginInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RetCharLoginInfo_2eproto {
  StaticDescriptorInitializer_RetCharLoginInfo_2eproto() {
    protobuf_AddDesc_RetCharLoginInfo_2eproto();
  }
} static_descriptor_initializer_RetCharLoginInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RetCharLoginInfo::kCharidFieldNumber;
const int RetCharLoginInfo::kMapidFieldNumber;
const int RetCharLoginInfo::kIsonFieldNumber;
const int RetCharLoginInfo::kOpenIDFieldNumber;
#endif  // !_MSC_VER

RetCharLoginInfo::RetCharLoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CharLogin.RetCharLoginInfo)
}

void RetCharLoginInfo::InitAsDefaultInstance() {
}

RetCharLoginInfo::RetCharLoginInfo(const RetCharLoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CharLogin.RetCharLoginInfo)
}

void RetCharLoginInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  mapid_ = GOOGLE_LONGLONG(0);
  ison_ = false;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetCharLoginInfo::~RetCharLoginInfo() {
  // @@protoc_insertion_point(destructor:CharLogin.RetCharLoginInfo)
  SharedDtor();
}

void RetCharLoginInfo::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void RetCharLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetCharLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetCharLoginInfo_descriptor_;
}

const RetCharLoginInfo& RetCharLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RetCharLoginInfo_2eproto();
  return *default_instance_;
}

RetCharLoginInfo* RetCharLoginInfo::default_instance_ = NULL;

RetCharLoginInfo* RetCharLoginInfo::New() const {
  return new RetCharLoginInfo;
}

void RetCharLoginInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RetCharLoginInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, mapid_);
    ison_ = false;
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetCharLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CharLogin.RetCharLoginInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // required int64 mapid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ison;
        break;
      }

      // optional bool ison = 3;
      case 3: {
        if (tag == 24) {
         parse_ison:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ison_)));
          set_has_ison();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_openID;
        break;
      }

      // optional string openID = 4;
      case 4: {
        if (tag == 34) {
         parse_openID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CharLogin.RetCharLoginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CharLogin.RetCharLoginInfo)
  return false;
#undef DO_
}

void RetCharLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CharLogin.RetCharLoginInfo)
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int64 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mapid(), output);
  }

  // optional bool ison = 3;
  if (has_ison()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ison(), output);
  }

  // optional string openID = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CharLogin.RetCharLoginInfo)
}

::google::protobuf::uint8* RetCharLoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharLogin.RetCharLoginInfo)
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int64 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mapid(), target);
  }

  // optional bool ison = 3;
  if (has_ison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ison(), target);
  }

  // optional string openID = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharLogin.RetCharLoginInfo)
  return target;
}

int RetCharLoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int64 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional bool ison = 3;
    if (has_ison()) {
      total_size += 1 + 1;
    }

    // optional string openID = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetCharLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetCharLoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetCharLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetCharLoginInfo::MergeFrom(const RetCharLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_ison()) {
      set_ison(from.ison());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetCharLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetCharLoginInfo::CopyFrom(const RetCharLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetCharLoginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RetCharLoginInfo::Swap(RetCharLoginInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(ison_, other->ison_);
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetCharLoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetCharLoginInfo_descriptor_;
  metadata.reflection = RetCharLoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharExitGame::kCharidFieldNumber;
#endif  // !_MSC_VER

CharExitGame::CharExitGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CharLogin.CharExitGame)
}

void CharExitGame::InitAsDefaultInstance() {
}

CharExitGame::CharExitGame(const CharExitGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CharLogin.CharExitGame)
}

void CharExitGame::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharExitGame::~CharExitGame() {
  // @@protoc_insertion_point(destructor:CharLogin.CharExitGame)
  SharedDtor();
}

void CharExitGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharExitGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharExitGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharExitGame_descriptor_;
}

const CharExitGame& CharExitGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RetCharLoginInfo_2eproto();
  return *default_instance_;
}

CharExitGame* CharExitGame::default_instance_ = NULL;

CharExitGame* CharExitGame::New() const {
  return new CharExitGame;
}

void CharExitGame::Clear() {
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharExitGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CharLogin.CharExitGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CharLogin.CharExitGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CharLogin.CharExitGame)
  return false;
#undef DO_
}

void CharExitGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CharLogin.CharExitGame)
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CharLogin.CharExitGame)
}

::google::protobuf::uint8* CharExitGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharLogin.CharExitGame)
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharLogin.CharExitGame)
  return target;
}

int CharExitGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharExitGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharExitGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharExitGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharExitGame::MergeFrom(const CharExitGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharExitGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharExitGame::CopyFrom(const CharExitGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharExitGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CharExitGame::Swap(CharExitGame* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharExitGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharExitGame_descriptor_;
  metadata.reflection = CharExitGame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CharLogin

// @@protoc_insertion_point(global_scope)
