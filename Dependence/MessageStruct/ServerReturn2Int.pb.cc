// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerReturn2Int.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerReturn2Int.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ServerReturn {

namespace {

const ::google::protobuf::Descriptor* ServerDoubleInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerDoubleInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerDoubleRetInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerDoubleRetInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerDoubleUint32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerDoubleUint32_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerDoubleUint32Array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerDoubleUint32Array_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerReturn2Int_2eproto() {
  protobuf_AddDesc_ServerReturn2Int_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerReturn2Int.proto");
  GOOGLE_CHECK(file != NULL);
  ServerDoubleInt_descriptor_ = file->message_type(0);
  static const int ServerDoubleInt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleInt, retf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleInt, rets_),
  };
  ServerDoubleInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerDoubleInt_descriptor_,
      ServerDoubleInt::default_instance_,
      ServerDoubleInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerDoubleInt));
  ServerDoubleRetInt_descriptor_ = file->message_type(1);
  static const int ServerDoubleRetInt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleRetInt, retf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleRetInt, rets_),
  };
  ServerDoubleRetInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerDoubleRetInt_descriptor_,
      ServerDoubleRetInt::default_instance_,
      ServerDoubleRetInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleRetInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleRetInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerDoubleRetInt));
  ServerDoubleUint32_descriptor_ = file->message_type(2);
  static const int ServerDoubleUint32_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleUint32, retf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleUint32, rets_),
  };
  ServerDoubleUint32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerDoubleUint32_descriptor_,
      ServerDoubleUint32::default_instance_,
      ServerDoubleUint32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleUint32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleUint32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerDoubleUint32));
  ServerDoubleUint32Array_descriptor_ = file->message_type(3);
  static const int ServerDoubleUint32Array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleUint32Array, ret_),
  };
  ServerDoubleUint32Array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerDoubleUint32Array_descriptor_,
      ServerDoubleUint32Array::default_instance_,
      ServerDoubleUint32Array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleUint32Array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDoubleUint32Array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerDoubleUint32Array));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerReturn2Int_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerDoubleInt_descriptor_, &ServerDoubleInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerDoubleRetInt_descriptor_, &ServerDoubleRetInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerDoubleUint32_descriptor_, &ServerDoubleUint32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerDoubleUint32Array_descriptor_, &ServerDoubleUint32Array::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerReturn2Int_2eproto() {
  delete ServerDoubleInt::default_instance_;
  delete ServerDoubleInt_reflection_;
  delete ServerDoubleRetInt::default_instance_;
  delete ServerDoubleRetInt_reflection_;
  delete ServerDoubleUint32::default_instance_;
  delete ServerDoubleUint32_reflection_;
  delete ServerDoubleUint32Array::default_instance_;
  delete ServerDoubleUint32Array_reflection_;
}

void protobuf_AddDesc_ServerReturn2Int_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ServerReturn2Int.proto\022\014ServerReturn\"-"
    "\n\017ServerDoubleInt\022\014\n\004retf\030\001 \002(\003\022\014\n\004rets\030"
    "\002 \001(\003\"0\n\022ServerDoubleRetInt\022\014\n\004retf\030\001 \002("
    "\005\022\014\n\004rets\030\002 \001(\003\"0\n\022ServerDoubleUint32\022\014\n"
    "\004retf\030\001 \002(\005\022\014\n\004rets\030\002 \001(\005\"H\n\027ServerDoubl"
    "eUint32Array\022-\n\003ret\030\001 \003(\0132 .ServerReturn"
    ".ServerDoubleUint32", 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerReturn2Int.proto", &protobuf_RegisterTypes);
  ServerDoubleInt::default_instance_ = new ServerDoubleInt();
  ServerDoubleRetInt::default_instance_ = new ServerDoubleRetInt();
  ServerDoubleUint32::default_instance_ = new ServerDoubleUint32();
  ServerDoubleUint32Array::default_instance_ = new ServerDoubleUint32Array();
  ServerDoubleInt::default_instance_->InitAsDefaultInstance();
  ServerDoubleRetInt::default_instance_->InitAsDefaultInstance();
  ServerDoubleUint32::default_instance_->InitAsDefaultInstance();
  ServerDoubleUint32Array::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerReturn2Int_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerReturn2Int_2eproto {
  StaticDescriptorInitializer_ServerReturn2Int_2eproto() {
    protobuf_AddDesc_ServerReturn2Int_2eproto();
  }
} static_descriptor_initializer_ServerReturn2Int_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ServerDoubleInt::kRetfFieldNumber;
const int ServerDoubleInt::kRetsFieldNumber;
#endif  // !_MSC_VER

ServerDoubleInt::ServerDoubleInt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerReturn.ServerDoubleInt)
}

void ServerDoubleInt::InitAsDefaultInstance() {
}

ServerDoubleInt::ServerDoubleInt(const ServerDoubleInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerReturn.ServerDoubleInt)
}

void ServerDoubleInt::SharedCtor() {
  _cached_size_ = 0;
  retf_ = GOOGLE_LONGLONG(0);
  rets_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerDoubleInt::~ServerDoubleInt() {
  // @@protoc_insertion_point(destructor:ServerReturn.ServerDoubleInt)
  SharedDtor();
}

void ServerDoubleInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerDoubleInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerDoubleInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerDoubleInt_descriptor_;
}

const ServerDoubleInt& ServerDoubleInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerReturn2Int_2eproto();
  return *default_instance_;
}

ServerDoubleInt* ServerDoubleInt::default_instance_ = NULL;

ServerDoubleInt* ServerDoubleInt::New() const {
  return new ServerDoubleInt;
}

void ServerDoubleInt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerDoubleInt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(retf_, rets_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerDoubleInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerReturn.ServerDoubleInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 retf = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &retf_)));
          set_has_retf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rets;
        break;
      }

      // optional int64 rets = 2;
      case 2: {
        if (tag == 16) {
         parse_rets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rets_)));
          set_has_rets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerReturn.ServerDoubleInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerReturn.ServerDoubleInt)
  return false;
#undef DO_
}

void ServerDoubleInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerReturn.ServerDoubleInt)
  // required int64 retf = 1;
  if (has_retf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->retf(), output);
  }

  // optional int64 rets = 2;
  if (has_rets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerReturn.ServerDoubleInt)
}

::google::protobuf::uint8* ServerDoubleInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerReturn.ServerDoubleInt)
  // required int64 retf = 1;
  if (has_retf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->retf(), target);
  }

  // optional int64 rets = 2;
  if (has_rets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerReturn.ServerDoubleInt)
  return target;
}

int ServerDoubleInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 retf = 1;
    if (has_retf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->retf());
    }

    // optional int64 rets = 2;
    if (has_rets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerDoubleInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerDoubleInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerDoubleInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerDoubleInt::MergeFrom(const ServerDoubleInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retf()) {
      set_retf(from.retf());
    }
    if (from.has_rets()) {
      set_rets(from.rets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerDoubleInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerDoubleInt::CopyFrom(const ServerDoubleInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerDoubleInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerDoubleInt::Swap(ServerDoubleInt* other) {
  if (other != this) {
    std::swap(retf_, other->retf_);
    std::swap(rets_, other->rets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerDoubleInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerDoubleInt_descriptor_;
  metadata.reflection = ServerDoubleInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerDoubleRetInt::kRetfFieldNumber;
const int ServerDoubleRetInt::kRetsFieldNumber;
#endif  // !_MSC_VER

ServerDoubleRetInt::ServerDoubleRetInt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerReturn.ServerDoubleRetInt)
}

void ServerDoubleRetInt::InitAsDefaultInstance() {
}

ServerDoubleRetInt::ServerDoubleRetInt(const ServerDoubleRetInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerReturn.ServerDoubleRetInt)
}

void ServerDoubleRetInt::SharedCtor() {
  _cached_size_ = 0;
  retf_ = 0;
  rets_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerDoubleRetInt::~ServerDoubleRetInt() {
  // @@protoc_insertion_point(destructor:ServerReturn.ServerDoubleRetInt)
  SharedDtor();
}

void ServerDoubleRetInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerDoubleRetInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerDoubleRetInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerDoubleRetInt_descriptor_;
}

const ServerDoubleRetInt& ServerDoubleRetInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerReturn2Int_2eproto();
  return *default_instance_;
}

ServerDoubleRetInt* ServerDoubleRetInt::default_instance_ = NULL;

ServerDoubleRetInt* ServerDoubleRetInt::New() const {
  return new ServerDoubleRetInt;
}

void ServerDoubleRetInt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerDoubleRetInt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rets_, retf_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerDoubleRetInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerReturn.ServerDoubleRetInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retf = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retf_)));
          set_has_retf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rets;
        break;
      }

      // optional int64 rets = 2;
      case 2: {
        if (tag == 16) {
         parse_rets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rets_)));
          set_has_rets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerReturn.ServerDoubleRetInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerReturn.ServerDoubleRetInt)
  return false;
#undef DO_
}

void ServerDoubleRetInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerReturn.ServerDoubleRetInt)
  // required int32 retf = 1;
  if (has_retf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retf(), output);
  }

  // optional int64 rets = 2;
  if (has_rets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerReturn.ServerDoubleRetInt)
}

::google::protobuf::uint8* ServerDoubleRetInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerReturn.ServerDoubleRetInt)
  // required int32 retf = 1;
  if (has_retf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retf(), target);
  }

  // optional int64 rets = 2;
  if (has_rets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerReturn.ServerDoubleRetInt)
  return target;
}

int ServerDoubleRetInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retf = 1;
    if (has_retf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retf());
    }

    // optional int64 rets = 2;
    if (has_rets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerDoubleRetInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerDoubleRetInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerDoubleRetInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerDoubleRetInt::MergeFrom(const ServerDoubleRetInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retf()) {
      set_retf(from.retf());
    }
    if (from.has_rets()) {
      set_rets(from.rets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerDoubleRetInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerDoubleRetInt::CopyFrom(const ServerDoubleRetInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerDoubleRetInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerDoubleRetInt::Swap(ServerDoubleRetInt* other) {
  if (other != this) {
    std::swap(retf_, other->retf_);
    std::swap(rets_, other->rets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerDoubleRetInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerDoubleRetInt_descriptor_;
  metadata.reflection = ServerDoubleRetInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerDoubleUint32::kRetfFieldNumber;
const int ServerDoubleUint32::kRetsFieldNumber;
#endif  // !_MSC_VER

ServerDoubleUint32::ServerDoubleUint32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerReturn.ServerDoubleUint32)
}

void ServerDoubleUint32::InitAsDefaultInstance() {
}

ServerDoubleUint32::ServerDoubleUint32(const ServerDoubleUint32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerReturn.ServerDoubleUint32)
}

void ServerDoubleUint32::SharedCtor() {
  _cached_size_ = 0;
  retf_ = 0;
  rets_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerDoubleUint32::~ServerDoubleUint32() {
  // @@protoc_insertion_point(destructor:ServerReturn.ServerDoubleUint32)
  SharedDtor();
}

void ServerDoubleUint32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerDoubleUint32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerDoubleUint32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerDoubleUint32_descriptor_;
}

const ServerDoubleUint32& ServerDoubleUint32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerReturn2Int_2eproto();
  return *default_instance_;
}

ServerDoubleUint32* ServerDoubleUint32::default_instance_ = NULL;

ServerDoubleUint32* ServerDoubleUint32::New() const {
  return new ServerDoubleUint32;
}

void ServerDoubleUint32::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerDoubleUint32*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(retf_, rets_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerDoubleUint32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerReturn.ServerDoubleUint32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retf = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retf_)));
          set_has_retf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rets;
        break;
      }

      // optional int32 rets = 2;
      case 2: {
        if (tag == 16) {
         parse_rets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rets_)));
          set_has_rets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerReturn.ServerDoubleUint32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerReturn.ServerDoubleUint32)
  return false;
#undef DO_
}

void ServerDoubleUint32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerReturn.ServerDoubleUint32)
  // required int32 retf = 1;
  if (has_retf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retf(), output);
  }

  // optional int32 rets = 2;
  if (has_rets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerReturn.ServerDoubleUint32)
}

::google::protobuf::uint8* ServerDoubleUint32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerReturn.ServerDoubleUint32)
  // required int32 retf = 1;
  if (has_retf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retf(), target);
  }

  // optional int32 rets = 2;
  if (has_rets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerReturn.ServerDoubleUint32)
  return target;
}

int ServerDoubleUint32::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retf = 1;
    if (has_retf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retf());
    }

    // optional int32 rets = 2;
    if (has_rets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerDoubleUint32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerDoubleUint32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerDoubleUint32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerDoubleUint32::MergeFrom(const ServerDoubleUint32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retf()) {
      set_retf(from.retf());
    }
    if (from.has_rets()) {
      set_rets(from.rets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerDoubleUint32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerDoubleUint32::CopyFrom(const ServerDoubleUint32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerDoubleUint32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerDoubleUint32::Swap(ServerDoubleUint32* other) {
  if (other != this) {
    std::swap(retf_, other->retf_);
    std::swap(rets_, other->rets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerDoubleUint32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerDoubleUint32_descriptor_;
  metadata.reflection = ServerDoubleUint32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerDoubleUint32Array::kRetFieldNumber;
#endif  // !_MSC_VER

ServerDoubleUint32Array::ServerDoubleUint32Array()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerReturn.ServerDoubleUint32Array)
}

void ServerDoubleUint32Array::InitAsDefaultInstance() {
}

ServerDoubleUint32Array::ServerDoubleUint32Array(const ServerDoubleUint32Array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerReturn.ServerDoubleUint32Array)
}

void ServerDoubleUint32Array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerDoubleUint32Array::~ServerDoubleUint32Array() {
  // @@protoc_insertion_point(destructor:ServerReturn.ServerDoubleUint32Array)
  SharedDtor();
}

void ServerDoubleUint32Array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerDoubleUint32Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerDoubleUint32Array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerDoubleUint32Array_descriptor_;
}

const ServerDoubleUint32Array& ServerDoubleUint32Array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerReturn2Int_2eproto();
  return *default_instance_;
}

ServerDoubleUint32Array* ServerDoubleUint32Array::default_instance_ = NULL;

ServerDoubleUint32Array* ServerDoubleUint32Array::New() const {
  return new ServerDoubleUint32Array;
}

void ServerDoubleUint32Array::Clear() {
  ret_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerDoubleUint32Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerReturn.ServerDoubleUint32Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerReturn.ServerDoubleUint32 ret = 1;
      case 1: {
        if (tag == 10) {
         parse_ret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ret;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerReturn.ServerDoubleUint32Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerReturn.ServerDoubleUint32Array)
  return false;
#undef DO_
}

void ServerDoubleUint32Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerReturn.ServerDoubleUint32Array)
  // repeated .ServerReturn.ServerDoubleUint32 ret = 1;
  for (int i = 0; i < this->ret_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerReturn.ServerDoubleUint32Array)
}

::google::protobuf::uint8* ServerDoubleUint32Array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerReturn.ServerDoubleUint32Array)
  // repeated .ServerReturn.ServerDoubleUint32 ret = 1;
  for (int i = 0; i < this->ret_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerReturn.ServerDoubleUint32Array)
  return target;
}

int ServerDoubleUint32Array::ByteSize() const {
  int total_size = 0;

  // repeated .ServerReturn.ServerDoubleUint32 ret = 1;
  total_size += 1 * this->ret_size();
  for (int i = 0; i < this->ret_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ret(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerDoubleUint32Array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerDoubleUint32Array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerDoubleUint32Array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerDoubleUint32Array::MergeFrom(const ServerDoubleUint32Array& from) {
  GOOGLE_CHECK_NE(&from, this);
  ret_.MergeFrom(from.ret_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerDoubleUint32Array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerDoubleUint32Array::CopyFrom(const ServerDoubleUint32Array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerDoubleUint32Array::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ret())) return false;
  return true;
}

void ServerDoubleUint32Array::Swap(ServerDoubleUint32Array* other) {
  if (other != this) {
    ret_.Swap(&other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerDoubleUint32Array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerDoubleUint32Array_descriptor_;
  metadata.reflection = ServerDoubleUint32Array_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerReturn

// @@protoc_insertion_point(global_scope)
